/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package codeflow

import codeflow.java.AstReader
import java.nio.file.Files
import java.nio.file.Path
import kotlin.test.Test


class AppTest {

    private val userDirectory = System.getProperty("user.dir")
    private val userDirPath = Path.of(userDirectory)
    private val testResourcesPath = userDirPath
        .resolve("src")
        .resolve("test")
        .resolve("resources")

    private fun codeflow(testDir: String, testFiles: List<String>) {
        val testDirPath = testResourcesPath.resolve(testDir)
        val testFilePaths = testFiles.map { testDirPath.resolve(it) }
        val mainMethod = AstReader(testResourcesPath).process(testFilePaths)

        val result = ArrayList<String>()
        MermaidExporter()
            .processMainMethod(mainMethod) { result.add(it) }

        try {
            val truth = Files.readAllLines(testDirPath.resolve("truth.md"))
            if (result != truth) {
                Files.write(testDirPath.resolve("result.md"), result)
            }
            assert(result == truth)
        } catch (e: Exception) {
            Files.write(testDirPath.resolve("result.md"), result)
            throw e
        }
    }

    @Test fun base() = codeflow("base", listOf("App.java"))
    @Test fun funcCall() = codeflow("funcCall", listOf("App.java"))
    @Test fun member() = codeflow("member", listOf("App.java"))
    @Test fun files() = codeflow("files", listOf("App.java", "ClassX.java", "ClassY.java"))
    @Test fun constructor() = codeflow("constructor", listOf("App.java"))
    @Test fun if1() = codeflow("if1", listOf("App.java"))
    @Test fun forLoop() = codeflow("forLoop", listOf("App.java"))
}
